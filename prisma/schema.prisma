// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Note: model tables bellow.

model Category {
  id          Int    @id @default(autoincrement())
  color       String
  sole        String
  name        String @unique
  description String
  Shoe        Shoe[]

  @@map("tb_categories")
}

model Shoe {
  id          Int      @id @default(autoincrement())
  hash_code   String   @unique @default(uuid())
  price       Decimal
  size        Int
  created_at  DateTime @default(now())
  deleted_at  DateTime
  category_id Int
  category    Category @relation(fields: [category_id], references: [id])
  Order       Order[]

  @@map("tb_shoes")
}

model Order {
  id        Int    @id @default(autoincrement())
  hash_code String @unique @default(uuid())
  note      String
  shoe_id   Int
  user_id   Int
  shoe      Shoe   @relation(fields: [shoe_id], references: [id])
  user      User   @relation(fields: [user_id], references: [id])

  @@map("tb_orders")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  role_id    Int
  created_at DateTime @default(now())
  deleted_at DateTime
  role       Role     @relation(fields: [role_id], references: [id])
  Order      Order[]

  @@map("tb_users")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique
  note String
  User User[]

  @@map("tb_roles")
}
